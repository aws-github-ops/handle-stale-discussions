"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasInstructionsReply = exports.hasReply = exports.exceedsDaysUntilStale = exports.containsText = exports.hasReaction = exports.containsNegativeReaction = exports.containsPositiveReaction = exports.isNegativeReaction = exports.isPositiveReaction = exports.daysSinceComment = void 0;
const graphql_1 = require("./generated/graphql");
function daysSinceComment(comment) {
    const currentDate = new Date();
    const commentDate = new Date(comment.node?.updatedAt.toString());
    const diffInMs = currentDate.getTime() - commentDate.getTime();
    const diffInDays = diffInMs / (1000 * 3600 * 24);
    return diffInDays;
}
exports.daysSinceComment = daysSinceComment;
function isPositiveReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsUp) || (content === graphql_1.ReactionContent.Heart) || (content === graphql_1.ReactionContent.Hooray) || (content === graphql_1.ReactionContent.Laugh) || (content === graphql_1.ReactionContent.Rocket));
}
exports.isPositiveReaction = isPositiveReaction;
function isNegativeReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsDown) || (content === graphql_1.ReactionContent.Confused));
}
exports.isNegativeReaction = isNegativeReaction;
function containsPositiveReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => isPositiveReaction(reaction?.content));
}
exports.containsPositiveReaction = containsPositiveReaction;
function containsNegativeReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => isNegativeReaction(reaction?.content));
}
exports.containsNegativeReaction = containsNegativeReaction;
function hasReaction(comment) {
    return comment?.node?.reactions.nodes?.length !== 0;
}
exports.hasReaction = hasReaction;
function containsText(comment, text) {
    return !!comment?.node?.bodyText?.indexOf(text);
}
exports.containsText = containsText;
function exceedsDaysUntilStale(comment, staleTimeDays) {
    return (daysSinceComment(comment) >= staleTimeDays);
}
exports.exceedsDaysUntilStale = exceedsDaysUntilStale;
// TODO: Implement this function
function hasReply(comment, discussion) {
    return true;
}
exports.hasReply = hasReply;
// TODO: Implement this function
function hasInstructionsReply(comment, discussion) {
    return true;
}
exports.hasInstructionsReply = hasInstructionsReply;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGlEQUFzRDtBQUV0RCxTQUFnQixnQkFBZ0IsQ0FBQyxPQUFzQztJQUNyRSxNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQy9CLE1BQU0sV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDakUsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMvRCxNQUFNLFVBQVUsR0FBRyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFORCw0Q0FNQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLE9BQWdDO0lBQ2pFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNoTixDQUFDO0FBRkQsZ0RBRUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxPQUFnQztJQUNqRSxPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDOUYsQ0FBQztBQUZELGdEQUVDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsT0FBc0M7SUFDN0UsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLE9BQVEsQ0FBQyxDQUFFLENBQUM7QUFDbEcsQ0FBQztBQUZELDREQUVDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsT0FBc0M7SUFDN0UsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLE9BQVEsQ0FBQyxDQUFFLENBQUM7QUFDbEcsQ0FBQztBQUZELDREQUVDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLE9BQXNDO0lBQ2hFLE9BQU8sT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLE9BQXNDLEVBQUUsSUFBWTtJQUMvRSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUZELG9DQUVDO0FBRUQsU0FBZ0IscUJBQXFCLENBQUMsT0FBc0MsRUFBRSxhQUFxQjtJQUNqRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUZELHNEQUVDO0FBRUQsZ0NBQWdDO0FBQ2hDLFNBQWdCLFFBQVEsQ0FBQyxPQUFzQyxFQUFFLFVBQWtDO0lBQ2pHLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUZELDRCQUVDO0FBRUQsZ0NBQWdDO0FBQ2hDLFNBQWdCLG9CQUFvQixDQUFDLE9BQXNDLEVBQUUsVUFBa0M7SUFDN0csT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRkQsb0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvY3Rva2l0IGZyb20gXCJAb2N0b2tpdC9ncmFwaHFsLXNjaGVtYVwiO1xuaW1wb3J0IHsgUmVhY3Rpb25Db250ZW50IH0gZnJvbSBcIi4vZ2VuZXJhdGVkL2dyYXBocWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGRheXNTaW5jZUNvbW1lbnQoY29tbWVudDogb2N0b2tpdC5EaXNjdXNzaW9uQ29tbWVudEVkZ2UpOiBudW1iZXIge1xuICBjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IGNvbW1lbnREYXRlID0gbmV3IERhdGUoY29tbWVudC5ub2RlPy51cGRhdGVkQXQudG9TdHJpbmcoKSk7XG4gIGNvbnN0IGRpZmZJbk1zID0gY3VycmVudERhdGUuZ2V0VGltZSgpIC0gY29tbWVudERhdGUuZ2V0VGltZSgpO1xuICBjb25zdCBkaWZmSW5EYXlzID0gZGlmZkluTXMgLyAoMTAwMCAqIDM2MDAgKiAyNCk7XG4gIHJldHVybiBkaWZmSW5EYXlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQb3NpdGl2ZVJlYWN0aW9uKGNvbnRlbnQ6IG9jdG9raXQuUmVhY3Rpb25Db250ZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiAoKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5UaHVtYnNVcCkgfHwgKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5IZWFydCkgfHwgKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5Ib29yYXkpIHx8IChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuTGF1Z2gpIHx8IChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuUm9ja2V0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05lZ2F0aXZlUmVhY3Rpb24oY29udGVudDogb2N0b2tpdC5SZWFjdGlvbkNvbnRlbnQpOiBib29sZWFuIHtcbiAgcmV0dXJuICgoY29udGVudCA9PT0gUmVhY3Rpb25Db250ZW50LlRodW1ic0Rvd24pIHx8IChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuQ29uZnVzZWQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zUG9zaXRpdmVSZWFjdGlvbihjb21tZW50OiBvY3Rva2l0LkRpc2N1c3Npb25Db21tZW50RWRnZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gY29tbWVudC5ub2RlPy5yZWFjdGlvbnMubm9kZXM/LnNvbWUocmVhY3Rpb24gPT4gaXNQb3NpdGl2ZVJlYWN0aW9uKHJlYWN0aW9uPy5jb250ZW50ISkpITtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zTmVnYXRpdmVSZWFjdGlvbihjb21tZW50OiBvY3Rva2l0LkRpc2N1c3Npb25Db21tZW50RWRnZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gY29tbWVudC5ub2RlPy5yZWFjdGlvbnMubm9kZXM/LnNvbWUocmVhY3Rpb24gPT4gaXNOZWdhdGl2ZVJlYWN0aW9uKHJlYWN0aW9uPy5jb250ZW50ISkpITtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlYWN0aW9uKGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50Py5ub2RlPy5yZWFjdGlvbnMubm9kZXM/Lmxlbmd0aCAhPT0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zVGV4dChjb21tZW50OiBvY3Rva2l0LkRpc2N1c3Npb25Db21tZW50RWRnZSwgdGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAhIWNvbW1lbnQ/Lm5vZGU/LmJvZHlUZXh0Py5pbmRleE9mKHRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhjZWVkc0RheXNVbnRpbFN0YWxlKGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlLCBzdGFsZVRpbWVEYXlzOiBudW1iZXIpOiBib29sZWFuIHtcbiAgcmV0dXJuIChkYXlzU2luY2VDb21tZW50KGNvbW1lbnQpID49IHN0YWxlVGltZURheXMpO1xufVxuXG4vLyBUT0RPOiBJbXBsZW1lbnQgdGhpcyBmdW5jdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlcGx5KGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlLCBkaXNjdXNzaW9uOiBvY3Rva2l0LkRpc2N1c3Npb25FZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBUT0RPOiBJbXBsZW1lbnQgdGhpcyBmdW5jdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0luc3RydWN0aW9uc1JlcGx5KGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlLCBkaXNjdXNzaW9uOiBvY3Rva2l0LkRpc2N1c3Npb25FZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiB0cnVlO1xufVxuIl19