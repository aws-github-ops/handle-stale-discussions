"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasInstructionsReply = exports.hasReply = exports.exceedsDaysUntilStale = exports.containsText = exports.hasReaction = exports.containsNegativeReaction = exports.containsPositiveReaction = exports.isNegativeReaction = exports.isPositiveReaction = exports.daysSinceComment = void 0;
const core = require("@actions/core");
const graphql_1 = require("./generated/graphql");
function daysSinceComment(comment) {
    const currentDate = new Date();
    const commentDate = new Date(comment.node?.updatedAt.toString());
    const diffInMs = currentDate.getTime() - commentDate.getTime();
    const diffInDays = diffInMs / (1000 * 3600 * 24);
    return diffInDays;
}
exports.daysSinceComment = daysSinceComment;
function isPositiveReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsUp) || (content === graphql_1.ReactionContent.Heart) || (content === graphql_1.ReactionContent.Hooray) || (content === graphql_1.ReactionContent.Laugh) || (content === graphql_1.ReactionContent.Rocket));
}
exports.isPositiveReaction = isPositiveReaction;
function isNegativeReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsDown) || (content === graphql_1.ReactionContent.Confused));
}
exports.isNegativeReaction = isNegativeReaction;
function containsPositiveReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => {
        core.debug(`Reaction content: ${reaction?.content}`);
        core.debug(isPositiveReaction(reaction?.content).toString());
        return isPositiveReaction(reaction?.content);
    });
}
exports.containsPositiveReaction = containsPositiveReaction;
function containsNegativeReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => {
        core.debug(`Reaction content: ${reaction?.content}`);
        core.debug(isNegativeReaction(reaction?.content).toString());
        return isNegativeReaction(reaction?.content);
    });
}
exports.containsNegativeReaction = containsNegativeReaction;
function hasReaction(comment) {
    return comment?.node?.reactions.nodes?.length !== 0;
}
exports.hasReaction = hasReaction;
function containsText(comment, text) {
    return comment?.node?.bodyText?.indexOf(text) >= 0;
}
exports.containsText = containsText;
function exceedsDaysUntilStale(comment, staleTimeDays) {
    return (daysSinceComment(comment) >= staleTimeDays);
}
exports.exceedsDaysUntilStale = exceedsDaysUntilStale;
// TODO: Implement this function
function hasReply(comment, discussion) {
    return true;
}
exports.hasReply = hasReply;
// TODO: Implement this function
function hasInstructionsReply(comment, discussion) {
    return true;
}
exports.hasInstructionsReply = hasInstructionsReply;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHNDQUFzQztBQUN0QyxpREFBc0Q7QUFFdEQsU0FBZ0IsZ0JBQWdCLENBQUMsT0FBc0M7SUFDckUsTUFBTSxXQUFXLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDL0QsTUFBTSxVQUFVLEdBQUcsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBTkQsNENBTUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxPQUFnQztJQUNqRSxPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDaE4sQ0FBQztBQUZELGdEQUVDO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUMsT0FBZ0M7SUFDakUsT0FBTyxDQUFDLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUFGRCxnREFFQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLE9BQXNDO0lBQzdFLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNwRCxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxPQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzlELE9BQU8sa0JBQWtCLENBQUMsUUFBUSxFQUFFLE9BQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBRSxDQUFDO0FBQ04sQ0FBQztBQU5ELDREQU1DO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsT0FBc0M7SUFDN0UsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3BELElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLE9BQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDOUQsT0FBTyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsT0FBUSxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFFLENBQUM7QUFDTixDQUFDO0FBTkQsNERBTUM7QUFFRCxTQUFnQixXQUFXLENBQUMsT0FBc0M7SUFDaEUsT0FBTyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxLQUFLLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRkQsa0NBRUM7QUFFRCxTQUFnQixZQUFZLENBQUMsT0FBc0MsRUFBRSxJQUFZO0lBQy9FLE9BQU8sT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRkQsb0NBRUM7QUFFRCxTQUFnQixxQkFBcUIsQ0FBQyxPQUFzQyxFQUFFLGFBQXFCO0lBQ2pHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRkQsc0RBRUM7QUFFRCxnQ0FBZ0M7QUFDaEMsU0FBZ0IsUUFBUSxDQUFDLE9BQXNDLEVBQUUsVUFBa0M7SUFDakcsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRkQsNEJBRUM7QUFFRCxnQ0FBZ0M7QUFDaEMsU0FBZ0Isb0JBQW9CLENBQUMsT0FBc0MsRUFBRSxVQUFrQztJQUM3RyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFGRCxvREFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG9jdG9raXQgZnJvbSBcIkBvY3Rva2l0L2dyYXBocWwtc2NoZW1hXCI7XG5pbXBvcnQgKiBhcyBjb3JlIGZyb20gXCJAYWN0aW9ucy9jb3JlXCI7XG5pbXBvcnQgeyBSZWFjdGlvbkNvbnRlbnQgfSBmcm9tIFwiLi9nZW5lcmF0ZWQvZ3JhcGhxbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZGF5c1NpbmNlQ29tbWVudChjb21tZW50OiBvY3Rva2l0LkRpc2N1c3Npb25Db21tZW50RWRnZSk6IG51bWJlciB7XG4gIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcbiAgY29uc3QgY29tbWVudERhdGUgPSBuZXcgRGF0ZShjb21tZW50Lm5vZGU/LnVwZGF0ZWRBdC50b1N0cmluZygpKTtcbiAgY29uc3QgZGlmZkluTXMgPSBjdXJyZW50RGF0ZS5nZXRUaW1lKCkgLSBjb21tZW50RGF0ZS5nZXRUaW1lKCk7XG4gIGNvbnN0IGRpZmZJbkRheXMgPSBkaWZmSW5NcyAvICgxMDAwICogMzYwMCAqIDI0KTtcbiAgcmV0dXJuIGRpZmZJbkRheXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Bvc2l0aXZlUmVhY3Rpb24oY29udGVudDogb2N0b2tpdC5SZWFjdGlvbkNvbnRlbnQpOiBib29sZWFuIHtcbiAgcmV0dXJuICgoY29udGVudCA9PT0gUmVhY3Rpb25Db250ZW50LlRodW1ic1VwKSB8fCAoY29udGVudCA9PT0gUmVhY3Rpb25Db250ZW50LkhlYXJ0KSB8fCAoY29udGVudCA9PT0gUmVhY3Rpb25Db250ZW50Lkhvb3JheSkgfHwgKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5MYXVnaCkgfHwgKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5Sb2NrZXQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTmVnYXRpdmVSZWFjdGlvbihjb250ZW50OiBvY3Rva2l0LlJlYWN0aW9uQ29udGVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gKChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuVGh1bWJzRG93bikgfHwgKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5Db25mdXNlZCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNQb3NpdGl2ZVJlYWN0aW9uKGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8uc29tZShyZWFjdGlvbiA9PiB7XG4gICAgY29yZS5kZWJ1ZyhgUmVhY3Rpb24gY29udGVudDogJHtyZWFjdGlvbj8uY29udGVudH1gKTtcbiAgICBjb3JlLmRlYnVnKGlzUG9zaXRpdmVSZWFjdGlvbihyZWFjdGlvbj8uY29udGVudCEpLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiBpc1Bvc2l0aXZlUmVhY3Rpb24ocmVhY3Rpb24/LmNvbnRlbnQhKTtcbiAgfSkhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNOZWdhdGl2ZVJlYWN0aW9uKGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8uc29tZShyZWFjdGlvbiA9PiB7XG4gICAgY29yZS5kZWJ1ZyhgUmVhY3Rpb24gY29udGVudDogJHtyZWFjdGlvbj8uY29udGVudH1gKTtcbiAgICBjb3JlLmRlYnVnKGlzTmVnYXRpdmVSZWFjdGlvbihyZWFjdGlvbj8uY29udGVudCEpLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiBpc05lZ2F0aXZlUmVhY3Rpb24ocmVhY3Rpb24/LmNvbnRlbnQhKTtcbiAgfSkhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzUmVhY3Rpb24oY29tbWVudDogb2N0b2tpdC5EaXNjdXNzaW9uQ29tbWVudEVkZ2UpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNvbW1lbnQ/Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8ubGVuZ3RoICE9PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNUZXh0KGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlLCB0ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNvbW1lbnQ/Lm5vZGU/LmJvZHlUZXh0Py5pbmRleE9mKHRleHQpISA+PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhjZWVkc0RheXNVbnRpbFN0YWxlKGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlLCBzdGFsZVRpbWVEYXlzOiBudW1iZXIpOiBib29sZWFuIHtcbiAgcmV0dXJuIChkYXlzU2luY2VDb21tZW50KGNvbW1lbnQpID49IHN0YWxlVGltZURheXMpO1xufVxuXG4vLyBUT0RPOiBJbXBsZW1lbnQgdGhpcyBmdW5jdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlcGx5KGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlLCBkaXNjdXNzaW9uOiBvY3Rva2l0LkRpc2N1c3Npb25FZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBUT0RPOiBJbXBsZW1lbnQgdGhpcyBmdW5jdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0luc3RydWN0aW9uc1JlcGx5KGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlLCBkaXNjdXNzaW9uOiBvY3Rva2l0LkRpc2N1c3Npb25FZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiB0cnVlO1xufVxuIl19