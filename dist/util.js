"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasNonBotReply = exports.hasReplies = exports.exceedsDaysUntilStale = exports.containsKeyword = exports.hasReaction = exports.containsNegativeReaction = exports.containsPositiveReaction = exports.isNegativeReaction = exports.isPositiveReaction = exports.daysSinceComment = void 0;
const graphql_1 = require("./generated/graphql");
function daysSinceComment(comment) {
    const currentDate = new Date();
    const commentDate = new Date(comment.node?.updatedAt.toString());
    const diffInMs = currentDate.getTime() - commentDate.getTime();
    const diffInDays = diffInMs / (1000 * 3600 * 24);
    return diffInDays;
}
exports.daysSinceComment = daysSinceComment;
function isPositiveReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsUp) || (content === graphql_1.ReactionContent.Heart) || (content === graphql_1.ReactionContent.Hooray) || (content === graphql_1.ReactionContent.Laugh) || (content === graphql_1.ReactionContent.Rocket));
}
exports.isPositiveReaction = isPositiveReaction;
function isNegativeReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsDown) || (content === graphql_1.ReactionContent.Confused));
}
exports.isNegativeReaction = isNegativeReaction;
function containsPositiveReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => {
        return isPositiveReaction(reaction?.content);
    });
}
exports.containsPositiveReaction = containsPositiveReaction;
function containsNegativeReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => {
        return isNegativeReaction(reaction?.content);
    });
}
exports.containsNegativeReaction = containsNegativeReaction;
function hasReaction(comment) {
    return comment?.node?.reactions.nodes?.length !== 0;
}
exports.hasReaction = hasReaction;
function containsKeyword(comment, text) {
    return comment?.node?.bodyText?.indexOf(text) >= 0;
}
exports.containsKeyword = containsKeyword;
function exceedsDaysUntilStale(comment, staleTimeDays) {
    return (daysSinceComment(comment) >= staleTimeDays);
}
exports.exceedsDaysUntilStale = exceedsDaysUntilStale;
function hasReplies(comment) {
    return comment.node?.replies.edges?.some(reply => {
        return (reply?.node?.bodyText.length !== 0);
    });
}
exports.hasReplies = hasReplies;
function hasNonBotReply(comments, GITHUB_BOT) {
    return comments.node?.replies.edges?.some(comment => {
        return (comment?.node?.author?.login != GITHUB_BOT);
    });
}
exports.hasNonBotReply = hasNonBotReply;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGlEQUEwRztBQUUxRyxTQUFnQixnQkFBZ0IsQ0FBQyxPQUE4QjtJQUM3RCxNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQy9CLE1BQU0sV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDakUsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMvRCxNQUFNLFVBQVUsR0FBRyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFORCw0Q0FNQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLE9BQXdCO0lBQ3pELE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNoTixDQUFDO0FBRkQsZ0RBRUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxPQUF3QjtJQUN6RCxPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDOUYsQ0FBQztBQUZELGdEQUVDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsT0FBOEI7SUFDckUsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3BELE9BQU8sa0JBQWtCLENBQUMsUUFBUSxFQUFFLE9BQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBRSxDQUFDO0FBQ04sQ0FBQztBQUpELDREQUlDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsT0FBOEI7SUFDckUsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3BELE9BQU8sa0JBQWtCLENBQUMsUUFBUSxFQUFFLE9BQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBRSxDQUFDO0FBQ04sQ0FBQztBQUpELDREQUlDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLE9BQThCO0lBQ3hELE9BQU8sT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLE9BQThCLEVBQUUsSUFBWTtJQUMxRSxPQUFPLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUZELDBDQUVDO0FBRUQsU0FBZ0IscUJBQXFCLENBQUMsT0FBOEIsRUFBRSxhQUFxQjtJQUN6RixPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUZELHNEQUVDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLE9BQThCO0lBQ3ZELE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMvQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBRSxDQUFDO0FBQ04sQ0FBQztBQUpELGdDQUlDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLFFBQStCLEVBQUUsVUFBa0I7SUFDaEYsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ2xELE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLElBQUksVUFBVSxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFFLENBQUM7QUFDTixDQUFDO0FBSkQsd0NBSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvY3Rva2l0IGZyb20gXCJAb2N0b2tpdC9ncmFwaHFsLXNjaGVtYVwiO1xuaW1wb3J0IHsgRGlzY3Vzc2lvbkNvbW1lbnRDb25uZWN0aW9uLCBEaXNjdXNzaW9uQ29tbWVudEVkZ2UsIFJlYWN0aW9uQ29udGVudCB9IGZyb20gXCIuL2dlbmVyYXRlZC9ncmFwaHFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzU2luY2VDb21tZW50KGNvbW1lbnQ6IERpc2N1c3Npb25Db21tZW50RWRnZSk6IG51bWJlciB7XG4gIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcbiAgY29uc3QgY29tbWVudERhdGUgPSBuZXcgRGF0ZShjb21tZW50Lm5vZGU/LnVwZGF0ZWRBdC50b1N0cmluZygpKTtcbiAgY29uc3QgZGlmZkluTXMgPSBjdXJyZW50RGF0ZS5nZXRUaW1lKCkgLSBjb21tZW50RGF0ZS5nZXRUaW1lKCk7XG4gIGNvbnN0IGRpZmZJbkRheXMgPSBkaWZmSW5NcyAvICgxMDAwICogMzYwMCAqIDI0KTtcbiAgcmV0dXJuIGRpZmZJbkRheXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Bvc2l0aXZlUmVhY3Rpb24oY29udGVudDogUmVhY3Rpb25Db250ZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiAoKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5UaHVtYnNVcCkgfHwgKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5IZWFydCkgfHwgKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5Ib29yYXkpIHx8IChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuTGF1Z2gpIHx8IChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuUm9ja2V0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05lZ2F0aXZlUmVhY3Rpb24oY29udGVudDogUmVhY3Rpb25Db250ZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiAoKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5UaHVtYnNEb3duKSB8fCAoY29udGVudCA9PT0gUmVhY3Rpb25Db250ZW50LkNvbmZ1c2VkKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc1Bvc2l0aXZlUmVhY3Rpb24oY29tbWVudDogRGlzY3Vzc2lvbkNvbW1lbnRFZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8uc29tZShyZWFjdGlvbiA9PiB7XG4gICAgcmV0dXJuIGlzUG9zaXRpdmVSZWFjdGlvbihyZWFjdGlvbj8uY29udGVudCEpO1xuICB9KSE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc05lZ2F0aXZlUmVhY3Rpb24oY29tbWVudDogRGlzY3Vzc2lvbkNvbW1lbnRFZGdlKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8uc29tZShyZWFjdGlvbiA9PiB7XG4gICAgcmV0dXJuIGlzTmVnYXRpdmVSZWFjdGlvbihyZWFjdGlvbj8uY29udGVudCEpO1xuICB9KSE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNSZWFjdGlvbihjb21tZW50OiBEaXNjdXNzaW9uQ29tbWVudEVkZ2UpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNvbW1lbnQ/Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8ubGVuZ3RoICE9PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNLZXl3b3JkKGNvbW1lbnQ6IERpc2N1c3Npb25Db21tZW50RWRnZSwgdGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21tZW50Py5ub2RlPy5ib2R5VGV4dD8uaW5kZXhPZih0ZXh0KSEgPj0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4Y2VlZHNEYXlzVW50aWxTdGFsZShjb21tZW50OiBEaXNjdXNzaW9uQ29tbWVudEVkZ2UsIHN0YWxlVGltZURheXM6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gKGRheXNTaW5jZUNvbW1lbnQoY29tbWVudCkgPj0gc3RhbGVUaW1lRGF5cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNSZXBsaWVzKGNvbW1lbnQ6IERpc2N1c3Npb25Db21tZW50RWRnZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gY29tbWVudC5ub2RlPy5yZXBsaWVzLmVkZ2VzPy5zb21lKHJlcGx5ID0+IHtcbiAgICByZXR1cm4gKHJlcGx5Py5ub2RlPy5ib2R5VGV4dC5sZW5ndGggIT09IDApO1xuICB9KSE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNOb25Cb3RSZXBseShjb21tZW50czogRGlzY3Vzc2lvbkNvbW1lbnRFZGdlLCBHSVRIVUJfQk9UOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNvbW1lbnRzLm5vZGU/LnJlcGxpZXMuZWRnZXM/LnNvbWUoY29tbWVudCA9PiB7XG4gICAgcmV0dXJuIChjb21tZW50Py5ub2RlPy5hdXRob3I/LmxvZ2luICE9IEdJVEhVQl9CT1QpO1xuICB9KSE7XG59XG4iXX0=