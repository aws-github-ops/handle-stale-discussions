"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasInstructionsReply = exports.hasReply = exports.exceedsDaysUntilStale = exports.containsText = exports.hasReaction = exports.containsNegativeReaction = exports.containsPositiveReaction = exports.isNegativeReaction = exports.isPositiveReaction = exports.daysSinceComment = void 0;
const core = require("@actions/core");
const graphql_1 = require("./generated/graphql");
function daysSinceComment(comment) {
    const currentDate = new Date();
    const commentDate = new Date(comment.node?.updatedAt.toString());
    const diffInMs = currentDate.getTime() - commentDate.getTime();
    const diffInDays = diffInMs / (1000 * 3600 * 24);
    return diffInDays;
}
exports.daysSinceComment = daysSinceComment;
function isPositiveReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsUp) || (content === graphql_1.ReactionContent.Heart) || (content === graphql_1.ReactionContent.Hooray) || (content === graphql_1.ReactionContent.Laugh) || (content === graphql_1.ReactionContent.Rocket));
}
exports.isPositiveReaction = isPositiveReaction;
function isNegativeReaction(content) {
    return ((content === graphql_1.ReactionContent.ThumbsDown) || (content === graphql_1.ReactionContent.Confused));
}
exports.isNegativeReaction = isNegativeReaction;
function containsPositiveReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => {
        core.debug(`Reaction content: ${reaction?.content}`);
        core.debug(isPositiveReaction(reaction?.content).toString());
        return isPositiveReaction(reaction?.content);
    });
}
exports.containsPositiveReaction = containsPositiveReaction;
function containsNegativeReaction(comment) {
    return comment.node?.reactions.nodes?.some(reaction => {
        core.debug(`Reaction content: ${reaction?.content}`);
        core.debug(isNegativeReaction(reaction?.content).toString());
        return isNegativeReaction(reaction?.content);
    });
}
exports.containsNegativeReaction = containsNegativeReaction;
function hasReaction(comment) {
    core.debug(comment?.node?.reactions.nodes?.length.toString());
    return comment?.node?.reactions.nodes?.length !== 0;
}
exports.hasReaction = hasReaction;
function containsText(comment, text) {
    core.debug(comment?.node?.bodyText?.indexOf(text).toString());
    return !!comment?.node?.bodyText?.indexOf(text);
}
exports.containsText = containsText;
function exceedsDaysUntilStale(comment, staleTimeDays) {
    return (daysSinceComment(comment) >= staleTimeDays);
}
exports.exceedsDaysUntilStale = exceedsDaysUntilStale;
// TODO: Implement this function
function hasReply(comment, discussion) {
    return true;
}
exports.hasReply = hasReply;
// TODO: Implement this function
function hasInstructionsReply(comment, discussion) {
    return true;
}
exports.hasInstructionsReply = hasInstructionsReply;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHNDQUFzQztBQUN0QyxpREFBc0Q7QUFFdEQsU0FBZ0IsZ0JBQWdCLENBQUMsT0FBc0M7SUFDckUsTUFBTSxXQUFXLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDL0QsTUFBTSxVQUFVLEdBQUcsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBTkQsNENBTUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxPQUFnQztJQUNqRSxPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyx5QkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDaE4sQ0FBQztBQUZELGdEQUVDO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUMsT0FBZ0M7SUFDakUsT0FBTyxDQUFDLENBQUMsT0FBTyxLQUFLLHlCQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUsseUJBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUFGRCxnREFFQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLE9BQXNDO0lBQzdFLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNwRCxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxPQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzlELE9BQU8sa0JBQWtCLENBQUMsUUFBUSxFQUFFLE9BQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBRSxDQUFDO0FBQ04sQ0FBQztBQU5ELDREQU1DO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsT0FBc0M7SUFDN0UsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3BELElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLE9BQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDOUQsT0FBTyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsT0FBUSxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFFLENBQUM7QUFDTixDQUFDO0FBTkQsNERBTUM7QUFFRCxTQUFnQixXQUFXLENBQUMsT0FBc0M7SUFDaEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRyxDQUFDLENBQUE7SUFDOUQsT0FBTyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxLQUFLLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBSEQsa0NBR0M7QUFFRCxTQUFnQixZQUFZLENBQUMsT0FBc0MsRUFBRSxJQUFZO0lBQy9FLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRyxDQUFDLENBQUM7SUFDL0QsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFIRCxvQ0FHQztBQUVELFNBQWdCLHFCQUFxQixDQUFDLE9BQXNDLEVBQUUsYUFBcUI7SUFDakcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCxzREFFQztBQUVELGdDQUFnQztBQUNoQyxTQUFnQixRQUFRLENBQUMsT0FBc0MsRUFBRSxVQUFrQztJQUNqRyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFGRCw0QkFFQztBQUVELGdDQUFnQztBQUNoQyxTQUFnQixvQkFBb0IsQ0FBQyxPQUFzQyxFQUFFLFVBQWtDO0lBQzdHLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUZELG9EQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgb2N0b2tpdCBmcm9tIFwiQG9jdG9raXQvZ3JhcGhxbC1zY2hlbWFcIjtcbmltcG9ydCAqIGFzIGNvcmUgZnJvbSBcIkBhY3Rpb25zL2NvcmVcIjtcbmltcG9ydCB7IFJlYWN0aW9uQ29udGVudCB9IGZyb20gXCIuL2dlbmVyYXRlZC9ncmFwaHFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzU2luY2VDb21tZW50KGNvbW1lbnQ6IG9jdG9raXQuRGlzY3Vzc2lvbkNvbW1lbnRFZGdlKTogbnVtYmVyIHtcbiAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBjb21tZW50RGF0ZSA9IG5ldyBEYXRlKGNvbW1lbnQubm9kZT8udXBkYXRlZEF0LnRvU3RyaW5nKCkpO1xuICBjb25zdCBkaWZmSW5NcyA9IGN1cnJlbnREYXRlLmdldFRpbWUoKSAtIGNvbW1lbnREYXRlLmdldFRpbWUoKTtcbiAgY29uc3QgZGlmZkluRGF5cyA9IGRpZmZJbk1zIC8gKDEwMDAgKiAzNjAwICogMjQpO1xuICByZXR1cm4gZGlmZkluRGF5cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUG9zaXRpdmVSZWFjdGlvbihjb250ZW50OiBvY3Rva2l0LlJlYWN0aW9uQ29udGVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gKChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuVGh1bWJzVXApIHx8IChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuSGVhcnQpIHx8IChjb250ZW50ID09PSBSZWFjdGlvbkNvbnRlbnQuSG9vcmF5KSB8fCAoY29udGVudCA9PT0gUmVhY3Rpb25Db250ZW50LkxhdWdoKSB8fCAoY29udGVudCA9PT0gUmVhY3Rpb25Db250ZW50LlJvY2tldCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOZWdhdGl2ZVJlYWN0aW9uKGNvbnRlbnQ6IG9jdG9raXQuUmVhY3Rpb25Db250ZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiAoKGNvbnRlbnQgPT09IFJlYWN0aW9uQ29udGVudC5UaHVtYnNEb3duKSB8fCAoY29udGVudCA9PT0gUmVhY3Rpb25Db250ZW50LkNvbmZ1c2VkKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc1Bvc2l0aXZlUmVhY3Rpb24oY29tbWVudDogb2N0b2tpdC5EaXNjdXNzaW9uQ29tbWVudEVkZ2UpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNvbW1lbnQubm9kZT8ucmVhY3Rpb25zLm5vZGVzPy5zb21lKHJlYWN0aW9uID0+IHtcbiAgICBjb3JlLmRlYnVnKGBSZWFjdGlvbiBjb250ZW50OiAke3JlYWN0aW9uPy5jb250ZW50fWApO1xuICAgIGNvcmUuZGVidWcoaXNQb3NpdGl2ZVJlYWN0aW9uKHJlYWN0aW9uPy5jb250ZW50ISkudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIGlzUG9zaXRpdmVSZWFjdGlvbihyZWFjdGlvbj8uY29udGVudCEpO1xuICB9KSE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc05lZ2F0aXZlUmVhY3Rpb24oY29tbWVudDogb2N0b2tpdC5EaXNjdXNzaW9uQ29tbWVudEVkZ2UpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNvbW1lbnQubm9kZT8ucmVhY3Rpb25zLm5vZGVzPy5zb21lKHJlYWN0aW9uID0+IHtcbiAgICBjb3JlLmRlYnVnKGBSZWFjdGlvbiBjb250ZW50OiAke3JlYWN0aW9uPy5jb250ZW50fWApO1xuICAgIGNvcmUuZGVidWcoaXNOZWdhdGl2ZVJlYWN0aW9uKHJlYWN0aW9uPy5jb250ZW50ISkudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIGlzTmVnYXRpdmVSZWFjdGlvbihyZWFjdGlvbj8uY29udGVudCEpO1xuICB9KSE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNSZWFjdGlvbihjb21tZW50OiBvY3Rva2l0LkRpc2N1c3Npb25Db21tZW50RWRnZSk6IGJvb2xlYW4ge1xuICBjb3JlLmRlYnVnKGNvbW1lbnQ/Lm5vZGU/LnJlYWN0aW9ucy5ub2Rlcz8ubGVuZ3RoLnRvU3RyaW5nKCkhKVxuICByZXR1cm4gY29tbWVudD8ubm9kZT8ucmVhY3Rpb25zLm5vZGVzPy5sZW5ndGggIT09IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc1RleHQoY29tbWVudDogb2N0b2tpdC5EaXNjdXNzaW9uQ29tbWVudEVkZ2UsIHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb3JlLmRlYnVnKGNvbW1lbnQ/Lm5vZGU/LmJvZHlUZXh0Py5pbmRleE9mKHRleHQpLnRvU3RyaW5nKCkhKTtcbiAgcmV0dXJuICEhY29tbWVudD8ubm9kZT8uYm9keVRleHQ/LmluZGV4T2YodGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGNlZWRzRGF5c1VudGlsU3RhbGUoY29tbWVudDogb2N0b2tpdC5EaXNjdXNzaW9uQ29tbWVudEVkZ2UsIHN0YWxlVGltZURheXM6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gKGRheXNTaW5jZUNvbW1lbnQoY29tbWVudCkgPj0gc3RhbGVUaW1lRGF5cyk7XG59XG5cbi8vIFRPRE86IEltcGxlbWVudCB0aGlzIGZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gaGFzUmVwbHkoY29tbWVudDogb2N0b2tpdC5EaXNjdXNzaW9uQ29tbWVudEVkZ2UsIGRpc2N1c3Npb246IG9jdG9raXQuRGlzY3Vzc2lvbkVkZ2UpOiBib29sZWFuIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIFRPRE86IEltcGxlbWVudCB0aGlzIGZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gaGFzSW5zdHJ1Y3Rpb25zUmVwbHkoY29tbWVudDogb2N0b2tpdC5EaXNjdXNzaW9uQ29tbWVudEVkZ2UsIGRpc2N1c3Npb246IG9jdG9raXQuRGlzY3Vzc2lvbkVkZ2UpOiBib29sZWFuIHtcbiAgcmV0dXJuIHRydWU7XG59XG4iXX0=